angular.module('RDash', ['ui.bootstrap', 'ui.router', 'ngCookies', 'lr.upload', 'ngAnimate', 'ngRoute', 'angucomplete-alt']);

'use strict';

/**
 * Route configuration for the RDash module.
 */
angular.module('RDash').config(['$stateProvider', '$urlRouterProvider',
    function($stateProvider, $urlRouterProvider) {

        // For unmatched routes
        $urlRouterProvider.otherwise('/');

        // Application routes
        $stateProvider
            .state('index', {
                url: '/',
                templateUrl: 'templates/dashboard.html'
            })
            .state('tables', {
                url: '/tables',
                templateUrl: 'templates/tables.html'
            })
            .state('drinkCreation', {
                url: '/drinkCreation',
                templateUrl: 'templates/drinkCreation.html'
            })
            .state('absolutSearch', {
                url: '/absolutSearch',
                templateUrl: 'templates/absolutSearch.html'
            })
            .state('drinkSearch', {
                url: '/drinkSearch',
                templateUrl: 'templates/drinkSearch.html'
            })
            .state('drinkView', {
                url: '/drinkView',
                templateUrl: 'templates/drinkView.html'

            })
            .state('userCabinet', {
                url: '/userCabinet',
                templateUrl: 'templates/userCabinet.html'

            })
            .state('userFavorites', {
                url: '/userFavorites',
                templateUrl: 'templates/userFavorites.html'

            })
            .state('features', {
                url: '/features',
                templateUrl: 'templates/features.html'

            });

    }
]);

angular.module('RDash')
.config(['$httpProvider', function($httpProvider) {
        $httpProvider.defaults.useXDomain = true;
        delete $httpProvider.defaults.headers.common['X-Requested-With'];
    }
])
.controller('absolutSearchController', function($scope, $http){
  // $http.get('http://addb.absolutdrinks.com/drinks/?apiKey=80199aea7e7b4509b14125f474a6c088', function(data){
  //   console.log(data);
  //   $scope.drinks = data.result;
  // });

  $scope.drinkList  = [];
  $http.get("api/drinks")
    .success(function(data){
      console.log(data);
      $scope.drinks = data;
    });
    $scope.addDrink=function(item){
      var index=$scope.drinks.indexOf(item);
      var drink=$scope.drinks[index];
      $scope.drinkList.push(drink);
      $scope.drinks.splice(index,1);
    };
    $scope.removeDrink=function(item){
      var index=$scope.drinkList.indexOf(item);
      $scope.drinks.push($scope.drinkList[index]);
      $scope.ingredients.splice(index,1);
    };


});

angular.module('RDash')
.directive('absolutSearch', function absolutSearch(){
  return{
    templateUrl: 'templates/absolutSearch/template.html',
    controller:'absolutSearchController',
    controllerAs:'absolutSearchCtrl',
    restrict:'E',
    scope:{}
  };
});

angular.module('RDash')
  .controller('commentsBoxController', function($scope, $http, $location) {
      //below needs to change to the current url
      $scope.commentURL = $location.absUrl();
  });

angular.module('RDash')
.directive('commentsBox', function commentsBox(){
  return{
    templateUrl: 'templates/commentsBox/template.html',
    controller:'commentsBoxController',
    controllerAs:'commentsBoxCtrl',
    restrict:'E',
    scope:{
      drink:'=',
      topDisplay:'='
    }
  };
})
.directive('dynFbCommentBox', function () {
    function createHTML(href, numposts, width, colorscheme) {
        return '<div class="fb-comments" ' +
                       'data-href="' + href + '" ' +
                       'data-numposts="' + numposts + '" ' +
                       'data-width="' + width + '" ' +
                       'data-colorsheme="' + colorscheme + '">' +
               '</div>';
    }

    return {
        restrict: 'A',
        scope: {},
        link: function postLink(scope, elem, attrs) {
            attrs.$observe('pageHref', function (newValue) {
                var href        = newValue;
                var numposts    = attrs.numposts    || 5;
                var width    = attrs.width    || "100%";
                var colorscheme = attrs.colorscheme || 'light';

                elem.html(createHTML(href, numposts, width, colorscheme));
                FB.XFBML.parse(elem[0]);
            });
        }
    };
});

angular.module('RDash')
  .controller('drinkBarController', function($scope, $http, $location, $window) {


    $http.get("api/drinks")
      .success(function(data) {
        $scope.drinks = data;
      });

      if($window.innerWidth <= 540){
        $scope.isMobile=true;
      }

      $scope.$watch(function(){
       return $window.innerWidth;
    }, function(value) {
      if(value <= 540){
        $scope.isMobile=true;
      }else{
        $scope.isMobile=false;
      }
   });

    $scope.selectedDrink = function(selected) {
      if (selected) {
        $location.path("/drinkView").search({drinkId: selected.originalObject.id});
      }else {
        console.log('cleared');
      }
    };
  });

angular.module('RDash')
.directive('drinkBar', function drinkSearch(){
  return{
    templateUrl: 'templates/drinkBar/template.html',
    controller:'drinkBarController',
    controllerAs:'drinkBarCtrl',
    restrict:'E',
    scope:{}
  };
});

angular.module('RDash')
  .controller('drinkCreationController', function($scope, $http, $location, $window) {
    //check if user is logged in
    $scope.hideUserMenu = true;
    $scope.currentUserId = -1;
    $http.get("/api/users/me/")
      .success(function(response) {
        $scope.currentUserId = response.id;
      });
    $scope.currentImage = "img/red-solo-cup.jpg";
    $scope.drink = {
      "name": "",
      "rating": 0,
      "instructions": "",
      "description": "",
      "userId": $scope.currentUserId,
      "color": "",
      "_amounts": []
    };
    $scope.image = {
      "file": "",
      "id": ""
    };
    $scope.add = {
      "text": "",
      "type": "",
      "liq": true
    };
    $scope.directionStep;
    $scope.newIngredient = [];
    $scope.directions = [];
    $scope.ingredients = [];
    $scope.drikPost = false;
    $scope.validType = true;
    $scope.validText = true;
    $http.get("/api/ingredients")
      .success(function(response) {
        $scope.dataIngredients = response;
      });

      if($window.innerWidth <= 540){
      $scope.isMobile=true;
    }

    $scope.$watch(function(){
     return $window.innerWidth;
  }, function(value) {
    if(value <= 540){
      $scope.isMobile=true;
    }else{
      $scope.isMobile=false;
    }
 });


    $scope.submit = function() {
      var holdDirections = [];
      for (i = 0; i < $scope.directions.length; ++i) {
        holdDirections.push($scope.directions[i].text);
      }
      $scope.drink._amounts.length = 0;
      angular.forEach($scope.ingredients, function(ing, i) {
        $scope.drink._amounts.push({
          "ingredientID": ing.id,
          "amount": ing.amount,
          "unit": "oz",
          "id": i
        });
      });
      $scope.drink.userId = $scope.currentUserId;
      $scope.drink.photo = $scope.currentImage;
      $scope.drink.instructions = holdDirections;
      console.log($scope.drink);
      $http.put("/api/drinks", $scope.drink)
        .success(function(response) {
          for (i = 0; i < $scope.ingredients.length; ++i) {
            $http.put("/api/drinks/" + response.id + "/ingredients/rel/" + $scope.ingredients[i].id);
          }
          $scope.drinkPost = true;
        });
    };

    $scope.remove = function(item) {
      var index = $scope.ingredients.indexOf(item);
      if ($scope.newIngredient.indexOf(item) === -1) {
        $scope.dataIngredients.push($scope.ingredients[index]);
        $scope.ingredients.splice(index, 1);
      } else {
        $http.delete("/api/ingredients/" + item.id)
          .success(function(response) {
            $scope.ingredients.splice(index, 1);
          });
      }
    };

    $scope.addIng = function(item) {
      var index = $scope.dataIngredients.indexOf(item);
      var ing = $scope.dataIngredients[index];
      //ing.amount = 0;
      $scope.ingredients.push(ing);
      $scope.dataIngredients.splice(index, 1);
    };

    $scope.addStep = function() {
      if ($scope.directionStep && $scope.directionStep.length > 2 && $scope.directions.length < 10) {
        var hold = {
          "step": $scope.directions.length + 1,
          "text": $scope.directionStep
        };
        $scope.directions.push(hold);
        $scope.directionStep = "";
      }
    };

    $scope.removeStep = function(item) {
      var index = $scope.directions.indexOf(item);
      $scope.directions.splice(index, 1);
      for (i = index; i < $scope.directions.length; ++i) {
        $scope.directions[i].step--;
      }
    };

    $scope.onSuccess = function(response) {
      $scope.currentImage = response.data.result.url;
    };

    // Do this stuff for editing
    if($location.search().id != null){
      $http.get("/api/drinks/" + $location.search().id)
        .success(function(response) {
          if (response.userId != $scope.currentUserId){
              $scope.hideUserMenu = true; //user not authorized to edit
          }
          $scope.drink = response;
          if (response.userId == $scope.currentUserId){
            $scope.hideUserMenu = false;
            $scope.drink.userId = $scope.currentUserId;
          } else {
            $scope.hideUserMenu = true; // you didn't make this drink, you can't edit it, fool
          }
          $scope.currentImage = response.photo;
          $scope.directions = [];
          for (i = 0; i < response.instructions.length; i++){
            var hold = {
              "step": i + 1,
              "text": response.instructions[i]
            };
            $scope.directions.push(hold);
            $scope.directionStep = "";
          }
          for (i = 0; i < response._amounts.length; i++){
            for(j = 0; j < $scope.dataIngredients.length; j++){
              if($scope.dataIngredients[j].id == response._amounts[i].ingredientID){
                $scope.addIng($scope.dataIngredients[j]);
              }
            }
            $scope.ingredients[i].amount = response._amounts[i].amount;
          }
        });
    } else { // not editing
      $http.get("/auth/user")
        .success(function(response) {
          $scope.userJSON = response;
          if (response.profiles != null && response.profiles.length > 0) {
            $scope.currentUserId = response.id;
            $scope.hideUserMenu = false;
          }
        });
    }

    $scope.addIngredient = function() {
      var hold = {
        "text": $scope.add.text,
        "type": $scope.add.type,
        "isLiquid": $scope.add.liq
      }
      if (hold.text.length >= 3 && hold.type.length >= 3) {
        $scope.add.text = "";
        $scope.add.type = "";
        $scope.validType = true;
        $scope.validText = true;
        $scope.adding = false;
        $http.put("/api/ingredients", hold)
          .success(function(response) {
            $scope.ingredients.push(response);
            $scope.newIngredient.push(response);
          });
      } else {
        if (hold.text.length < 3) {
          $scope.validText = false;
        } else {
          $scope.validText = true;
        }
        if (hold.type.length < 3) {
          $scope.validType = false;
        } else {
          $scope.validText = true;
        }
      }
    };
  });

angular.module('RDash')
.directive('drinkCreation', function drinkCreation(){
  return{
    templateUrl: 'templates/drinkCreation/template.html',
    controller:'drinkCreationController',
    controllerAs:'drinkCreationCtrl',
    restrict:'E',
    scope:{}
  };
});

angular.module('RDash')
  .controller('drinkDisplayController', function($scope, $http, $location) {

    init();

    $scope.$watch(function() {
      return $location.search();
    }, function(value) {
      $scope.urlData = value;
      init();
    });

    function init() {
      $scope.urlData = $location.search();
      $scope.topDisplay = true;
      $scope.favorited = false;
      $scope.hideHeart = true;
      $scope.rate = 0;
      $scope.myRate = 0;
      $scope.userRate = 0;
      $scope.pastRate = 0;
      $scope.enter = false;
      $scope.haveAllIng = false; //Logic for showing the Drinkitbutton
      $http.get("/auth/user")
        .success(function(response) {
          $scope.currentUser = response;
          if (response.profiles != null && response.profiles.length > 0) {
            $scope.hideHeart = false;
            if ($scope.currentUser.favoriteDrinks != null &&
              //$scope.currentUser.id != $scope.urlData.drinkId && //hide if we created the drink
              $scope.currentUser.favoriteDrinks.indexOf($scope.urlData.drinkId) > -1)
              $scope.favorited = true;
          }
        });
      $http.get("/api/drinks/" + $scope.urlData.drinkId)
        .success(function(response) {
          $scope.dataDrink = response;
          $scope.dataAmount = $scope.dataDrink._amounts;
          $scope.rate = 0;
          $scope.userRate = 0;
          if (response.commented) {
            if ($scope.currentUser) {
              $scope.hasRated = (!((response.commented.indexOf($scope.currentUser.id + "")) === -1));
            } else {
              $scope.hasRated = true;
            }
            $scope.rate = response.rating / response.commented.length;
            $scope.userRate = $scope.rate;
          } else {
            $scope.hasRated = false;
          }

        }).then(getIngredients());
    };


    function getIngredients() {
      $http.get("/api/drinks/" + $scope.urlData.drinkId + "/ingredients")
        .success(function(response) {
          $scope.dataIngredient = response;
          var repeat = true;
          for (i = 0; i < $scope.dataIngredient.length; ++i) {
            repeat = true;
            for (j = 0; i < $scope.dataAmount.length && repeat; ++j) {
              if ($scope.dataIngredient[i].id === $scope.dataAmount[j].ingredientID) {
                $scope.dataIngredient[i].amount = $scope.dataAmount[j];
                repeat = false;
              }
            }
          }
          //Adding the ammounts the users has to the ingredentslist

          if ($scope.currentUser) {
            $scope.haveAllIng = true;
            angular.forEach($scope.dataIngredient, function(ingInDrink) {
              var removed = false;
              angular.forEach($scope.currentUser._amounts, function(userAmount) {
                if (ingInDrink.id === userAmount.ingredientID) {
                  ingInDrink.amount.amountUserHas = userAmount.amount;
                  removed = true;
                  if (ingInDrink.amount.amountUserHas < ingInDrink.amount.amount) {
                    $scope.haveAllIng = false
                  }
                }
              });
              if (!removed) {
                ingInDrink.amount.amountUserHas = "--";
                $scope.haveAllIng = false;
              }
            });
          }
        });

    };
    $scope.favorite = function() {
      if (!$scope.favorited) {
        if ($scope.currentUser.favoriteDrinks == null)
          $scope.currentUser.favoriteDrinks = [];
        $scope.currentUser.favoriteDrinks.push($scope.urlData.drinkId);
      } else {
        var i = $scope.currentUser.favoriteDrinks.indexOf($scope.urlData.drinkId);
        $scope.currentUser.favoriteDrinks.splice(i, 1);
      }
      $http.put("/api/users/me", $scope.currentUser);
      $scope.favorited = !$scope.favorited;
    };

    $scope.rated = function(val) {
      if (!$scope.hasRated && $scope.currentUser && $scope.currentUser.id) {
        $scope.dataDrink.rating += val - $scope.pastRate;
        if (!$scope.dataDrink.commented) {
          $scope.dataDrink.commented = [];
        }
        if ($scope.pastRate === 0) {
          $scope.dataDrink.commented.push($scope.currentUser.id);
        }
        $scope.pastRate = val;
        $http.put("/api/drinks/" + $scope.urlData.drinkId, $scope.dataDrink)
      }
    };

    $scope.mouse = function(val) {
      if (!$scope.hasRated && $scope.currentUser && $scope.currentUser.id) {
        $scope.rate = val;
      }
    };

    $scope.rateClick = function(val) {
      if (!$scope.hasRated && $scope.currentUser && $scope.currentUser.id) {
        $scope.myRate = val;
        $scope.userRate = val;
        $scope.rated(val);
        $scope.permColor = true;
      }
    };
    $scope.divEnter = function() {
      if (!$scope.hasRated && $scope.currentUser && $scope.currentUser.id) {
        $scope.rate = $scope.myRate;
      }
    };
    $scope.divLeave = function() {
      if (!$scope.hasRated && $scope.currentUser && $scope.currentUser.id) {
        $scope.rate = $scope.userRate;
      }
    };
    $scope.drinkIt = function() {
      if (!$scope.currentUser) {
        $scope.status = "You must be logged in to drink something";
        return;
      }
      angular.forEach($scope.dataIngredient, function(ing) {
        var removed = false;
        $scope.removedAll = true;

        angular.forEach($scope.currentUser._amounts, function(amountYouHave) {
          if (ing.id == amountYouHave.ingredientID) { //if same ingredient
            if (ing.amount.amount <= amountYouHave.amount) { // if user has enough
              amountYouHave.amount -= ing.amount.amount; //remove amount from user.amounts
              amountYouHave.amount = amountYouHave.amount.toFixed(2);
              ing.amount.amountUserHas = amountYouHave.amount;
              removed = true;
            } else {
              $scope.status = "You dont have enough ingredients " + amount.ingredientID;
              $scope.removedAll = false;
            }
          }
        });
        if (!removed) {
          $scope.status = "you have no ingredient " + amount.ingredientID;
          $scope.removedAll = false;
        }
      });
      if ($scope.removedAll) {
        $scope.status = "Ingredients removed.";
        $http.put("/api/users/me", $scope.currentUser);
        console.log($scope.currentUser);
        console.log($scope.dataIngredients);
      }
    };

  });

angular.module('RDash')
.directive('drinkDisplay', function drinkDisplay(){
  return{
    templateUrl: 'templates/drinkDisplay/template.html',
    controller:'drinkDisplayController',
    controllerAs:'drinkDisplayCtrl',
    restrict:'E',
    scope:{}
  };
});

angular.module('RDash')
  .controller('drinkSearchController', function($scope, $http, $anchorScroll, $location, $routeParams, $stateParams, $window) {

    $http.get("api/drinks")
      .success(function(data) {
        $scope.drinks = data;
      });

    $scope.filter = "name";
    $scope.btnValue = "OFF";
    $scope.myBtn = "btn-danger";
    $scope.limit = 10;
    $scope.search = "";
    $scope.mySearch = false;
    $scope.ingredients = [];
    $scope.loggedIn = false;

    $http.get("/auth/user")
      .success(function(response) {
        $scope.currentUser = response;
        $scope.userIngredientsId = [];
        if (response.profiles != null && response.profiles.length > 0) {
          $scope.loggedIn = true;
          for (var i = 0; i < $scope.currentUser._amounts.length; ++i) {
            $scope.userIngredientsId.push($scope.currentUser._amounts[i].ingredientID);
          }
        }
      });

    $http.get("/api/ingredients")
      .success(function(response) {
        $scope.dataIngredients = response;
      });
      $scope.isTouch = is_touch_device();
    if ($location.search().search != null) {
      $scope.search = $location.search().search;
    }
    if($window.innerWidth <= 670){
      $scope.isMobile=true;
    }

    $scope.$watch(function(){
     return $window.innerWidth;
  }, function(value) {
    if(value <= 670){
      $scope.isMobile=true;
    }else{
      $scope.isMobile=false;
    }
 });

    function is_touch_device() {
      try {
        document.createEvent("TouchEvent");
        return true;
      } catch (e) {
        return false;
      }
    };

    $scope.drinkClick = function(drink){
      if($scope.isTouch){
        $scope.redirect(drink.id);
      }else{
        $scope.unexpand();
        drink.expand=!drink.expand;
      }
    };

    $scope.buttonPress = function() {
      $scope.mySearch = !$scope.mySearch;
      $scope.customSearch();
      if ($scope.mySearch) {
        $scope.btnValue = "ON";
        $scope.myBtn = "btn-info";
      } else {
        $scope.btnValue = "OFF";
        $scope.myBtn = "btn-danger";
      }
    };

    $scope.customSearch = function() {
      if ($scope.mySearch && $scope.loggedIn) {
        for (var i = 0; i < $scope.ingredients.length; ++i) {
          $scope.dataIngredients.push($scope.ingredients[i]);
        }
        $scope.ingredients = [];
        $scope.holdDrink = $scope.drinks;
        $scope.holdIngredients = $scope.dataIngredients;
        $scope.drinks = [];
        $scope.dataIngredients = [];
        for (var i = 0; i < $scope.holdDrink.length; ++i) {
          if (canMake($scope.holdDrink[i])) {
            $scope.drinks.push($scope.holdDrink[i]);
          }
        }
        for (var i = 0; i < $scope.holdIngredients.length; ++i) {
          if (!($scope.userIngredientsId.indexOf($scope.holdIngredients[i].id) === -1)) {
            $scope.dataIngredients.push($scope.holdIngredients[i]);
          }
        }
      } else {
        if ($scope.holdDrink) {
          $scope.drinks = $scope.holdDrink;
        }
        if ($scope.holdIngredients) {
          $scope.dataIngredients = $scope.holdIngredients;
          $scope.ingredients = [];
        }
      }
    };

    function canMake(drink) {
      for (var i = 0; i < drink._amounts.length; ++i) {
        if ($scope.userIngredientsId.indexOf(drink._amounts[i].ingredientID) === -1) {
          return false;
        }
      }
      return true;
    };

    $scope.redirect = function(id) {
      $location.path("/drinkView").search({
        drinkId: id
      });
    };

    $scope.filterFunction = function(element) {
      if ($scope.ingredients.length > 0) {
        if (!filterByIngredient(element)) {
          return false;
        }
      }
      if ($scope.search.length <= 0) {
        return true;
      }
      if (element.name.toLowerCase().indexOf($scope.search.toLowerCase()) > -1 || element.description.toLowerCase().indexOf($scope.search.toLowerCase()) > -1) {
        return true;
      } else {
        return false;
      }
    };

    function filterByIngredient(element) {
      var hold = [];
      for (var i = 0; i < element._amounts.length; ++i) {
        hold.push(element._amounts[i].ingredientID);
      }
      for (var i = 0; i < $scope.ingredients.length; ++i) {
        if (hold.indexOf($scope.ingredients[i].id) === -1) {
          return false;
        }
      }
      return true;
    };

    $scope.addIng = function(item) {
      var index = $scope.dataIngredients.indexOf(item);
      var ing = $scope.dataIngredients[index];
      $scope.ingredients.push(ing);
      $scope.dataIngredients.splice(index, 1);
    };

    $scope.removeIng = function(item) {
      var index = $scope.ingredients.indexOf(item);
      var ing = $scope.ingredients[index];
      $scope.dataIngredients.push(ing);
      $scope.ingredients.splice(index, 1);
    };

    $scope.unexpand = function() {
      angular.forEach($scope.drinks, function(drink, index) {
        drink.expand = false;
      });
    };
  });

angular.module('RDash')
.directive('drinkSearch', function drinkSearch(){
  return{
    templateUrl: 'templates/drinkSearch/template.html',
    controller:'drinkSearchController',
    controllerAs:'drinkSearchCtrl',
    restrict:'E',
    scope:{}
  };
});

angular.module('RDash')
  .controller('featuresController', function($scope, $http){
    $scope.dataRec=[];
    $http.get("/api/drinks")
      .success(function(response){
        $scope.dat = response;
        if($scope.dat == null)return;
        for(i = 0; i< 10; i++){
          $scope.dataRec.push($scope.dat[i]);
        }
      });

      function callback(results, status){
        if(status==google.maps.places.PlacesServiceStatus.OK){
          for(var i = 0; i<results.length; i++){
            var plcae = results[i];
            createMarker(results[i]);
          }
        }
      }

      function createMarker(place){
        var placeLoc = place.geometry.location;
        var marker = new google.maps.Marker({
          map: map,
          position: place.geometry.location
        });

        google.maps.event.addListener(marker, 'click', function() {
          infowindow.setContent(place.name);
          infowindow.open(map, this);
        });
      }

      function SearchForm($scope){
        $scope.location ='';
        $scope.doSearch = function(){
          if($scope.location===''){
            alert('Could not obtain your location');
          }
          else{
            var pyrmont = new google.maps.LatLng($scope.location);
            map = new google.maps.Map(document.getElementById('map'), {
              center: pyrmont,
              zoom: 15
            });
            var request = {
              location: pyrmont,
              radius: "100",
              types: ['liquor-store']
            };
            service = new google.maps.places.PlacesService(map);
            service.nearbySearch(request, callback);
          }
        }
      }
  })

angular.module('RDash')
.directive('features', function features(){
  return{
    templateUrl: 'templates/features/template.html',
    controller:'featuresController',
    controllerAs:'featuresCntrl',
    restrict:'E',
    scope:{}
  };
});


angular.module('RDash')
.controller('notificationController', function($scope, $http){
  $scope.isUserLoggedIn = false;
  $scope.notifications = [];
  $http.get("/auth/user")
    .success(function(response) {
      $scope.userJSON = response;
      if (response.profiles != null && response.profiles.length > 0) {
        $scope.isUserLoggedIn = true;
        $scope.currUser = response;
        for(i = 0; i < response._amounts.length; i++){
          if(response._amounts[i].amount < 3){
            $http.get("/api/ingredients/" + response._amounts[i].ingredientID)
              .success(function(response2) {
                if($scope.notifications.length < 9)
                  $scope.notifications.push("Low on " + response2.text);
              });
          }
        }
      }
    });
});

angular.module('RDash')
.directive('notification', function userImage(){
  return{
    templateUrl: 'templates/notification/template.html',
    controller:'notificationController',
    controllerAs:'notCtrl',
    restrict:'E',
    scope:{}
  };
});


angular.module('RDash')
.controller('notificationMenuController', function($scope, $http){
  $scope.notifications = [];
  $scope.isUserLoggedIn = false;
  $http.get("/auth/user")
    .success(function(response) {
      $scope.userJSON = response;
      if (response.profiles != null && response.profiles.length > 0) {
        $scope.isUserLoggedIn = true;
        $scope.currUser = response;
        for(i = 0; i < response._amounts.length; i++){
          if(response._amounts[i].amount < 3){
            $http.get("/api/ingredients/" + response._amounts[i].ingredientID)
              .success(function(response2) {
                $scope.notifications.push("Low on " + response2.text);
              });
          }
        }
      }
    });
});

angular.module('RDash')
.directive('notificationMenu', function notificationMenu(){
  return{
    templateUrl: 'templates/notificationMenu/template.html',
    controller:'notificationMenuController',
    controllerAs:'notificationMenuCtrl',
    restrict:'E',
    scope:{}
  };
});


  angular.module('RDash')
  .controller('MyCtrl', function($scope, $http){
  $scope.obj = { prop: "world" };
  });
/**testing a new widget**/




  angular.module('RDash')
  .directive('passObject', function testWidget(){
    return{
      restrict: 'E',
          scope: { obj: '=' },
          template: '<div>Hello, {{obj.prop}}!</div>'
    };
  });

angular.module('RDash')
.directive('twitterWid', function twitterWid(){
  return{
    templateUrl: 'templates/twitterWid/template.html',
    controller:'twitterWidController',
    controllerAs:'twtWdCtrl',
    restrict:'E',
    scope:{
      drink:'=',
      topDisplay:'='
    }
  };
})
.directive('twitterTimeline', [function() {
		return {
			restrict: 'A',
			scope: {
				cssUrl: "@",
				autoResize: "="
			},
			link: function (scope, element, attrs) {
				$('body').removeAttr('data-twttr-rendered');

				element
					.attr('id', 'twitter-feed')
					.attr("width", "100%" || attrs.width)
					.attr('data-chrome', 'noheader transparent')
					.attr('data-widget-id', attrs.twitterTimeline)
					.addClass('twitter-timeline');

				function render() {
					var body = $('.twitter-timeline').contents().find('body');

					if (scope.cssUrl) {
						body.append($('<link/>', { rel: 'stylesheet', href: scope.cssUrl, type: 'text/css' }));
					}

					function setHeight() {
						if (body.find('.stream').length == 0) {
							setTimeout(setHeight, 100);
						} else {
							body.find('.stream').addClass('stream-new').removeClass('stream').css('height', 'auto');
							$('.twitter-timeline').css('height', (body.height() + 20) + 'px');
						}
					}

					if (scope.autoResize) {
						setHeight();
					}
				}

				if (!$('#twitter-wjs').length) {
					$.getScript((/^http:/.test(document.location)?'http':'https') + '://platform.twitter.com/widgets.js', function() {
						render();
						$('.twitter-timeline').load(render);
	        		});
				}
			}
		};
  }]);

angular.module('RDash')
  .controller('userCabinetController', function($scope, $http, $window) {
    //check if user is logged in
    $scope.hideUserMenu = true;
    $http.get("/auth/user")
     .success(function(response){
       $scope.userJSON = response;
        if (response.profiles != null && response.profiles.length > 0){
          $scope.hideUserMenu = false;
        }
      });

      $scope.ingredients = [];

      $http.get("/api/ingredients")
        .success(function(response) {
          $scope.dataIngredients = response;
        });

      $scope.currIng = {};

      $http.get("/api/users/me/")
        .success(function(response) {
          $scope.me = response;
          for (i = 0; i < $scope.me._amounts.length; ++i) {
            $http.get("/api/ingredients/" + $scope.me._amounts[i].ingredientID)
              .success(function(response) {
                $scope.currIng = response;
                var currentamount = 0;
                for(k = 0; k < $scope.me._amounts.length; ++k){
                  if ($scope.me._amounts[k].ingredientID == $scope.currIng.id){
                    currentamount = $scope.me._amounts[k].amount;
                    break;
                  }
                }
                $scope.ingredients.push({
                  "text": $scope.currIng.text,
                  "type": $scope.currIng.type,
                  "isLiquid": $scope.currIng.isLiquid,
                  "amount": currentamount,
                  "id": $scope.currIng.id
                });
                for(j = 0; j < $scope.dataIngredients.length; ++j){
                  if($scope.dataIngredients[j].id == $scope.currIng.id)
                    $scope.dataIngredients.splice(j, 1);
                }
              });
          }
        });

        if($window.innerWidth <= 540){
        $scope.isMobile=true;
      }

      $scope.$watch(function(){
       return $window.innerWidth;
    }, function(value) {
      if(value <= 540){
        $scope.isMobile=true;
      }else{
        $scope.isMobile=false;
      }
   });

      $scope.addIng = function(item) {
        var index = $scope.dataIngredients.indexOf(item);
        var ing = $scope.dataIngredients[index];
        $scope.ingredients.push(ing);
        $scope.dataIngredients.splice(index, 1);
        $scope.me._amounts.push({
          "ingredientID": ing.id,
          "amount": ing.amount,
          "id": $scope.me._amounts.length + 1
        });
        $http.put("/api/users/me", $scope.me);
      };

      $scope.remove = function(item) {
        var index = $scope.ingredients.indexOf(item);
        $scope.dataIngredients.push($scope.ingredients[index]);
        for (i = 0; i < $scope.me._amounts.length; ++i) {
          if(item.id == $scope.me._amounts[i].ingredientID){
            $scope.me._amounts.splice(i, 1);
          }
        }
        $http.put("/api/users/me", $scope.me);
        $scope.ingredients.splice(index, 1);
      };
  });

angular.module('RDash')
.directive('userCabinet', function userCabinet(){
  return{
    templateUrl: 'templates/userCabinet/template.html',
    controller:'userCabinetController',
    controllerAs:'userCabCtrl',
    restrict:'E',
    scope:{}
  };
});

angular.module('RDash')
  .controller('userFavoritesController', function($scope, $http) {
    //check if user is logged in
    $scope.hideUserMenu = true;
    $scope.dataFav = [];
    $scope.dataCre = [];
    $http.get("/auth/user")
     .success(function(response){
       $scope.userJSON = response;
        if (response.profiles != null && response.profiles.length > 0){
          $scope.hideUserMenu = false;
        }
      });

      $http.get("/api/users/me/")
        .success(function(response) {
          $scope.me = response;
          if ($scope.me.favoriteDrinks == null) return;
          for(i = 0; i < $scope.me.favoriteDrinks.length; ++i){
            $http.get("/api/drinks/" + $scope.me.favoriteDrinks[i])
              .success(function(response) {
                $scope.dataFav.push(response);
            });
          }
        });

        $http.get("/api/users/me/customDrinks")
          .success(function(response) {
            $scope.dataCre = response;
        });

        $scope.unFavorite=function(drinkId) {
          for(i = 0; i < $scope.me.favoriteDrinks.length; ++i){
            if($scope.me.favoriteDrinks[i] == drinkId){
              $scope.me.favoriteDrinks.splice(i, 1);
              $http.put("/api/users/me", $scope.me);
            }
          }
          for(i = 0; i < $scope.dataFav.length; ++i){
            if($scope.dataFav[i].id == drinkId){
              $scope.dataFav.splice(i, 1);
            }
          }
        };
  });

angular.module('RDash')
.directive('userFavorites', function userCabinet(){
  return{
    templateUrl: 'templates/userFavorites/template.html',
    controller:'userFavoritesController',
    controllerAs:'userFavCntrl',
    restrict:'E',
    scope:{}
  };
});


angular.module('RDash')
.controller('userImageController', function($scope, $http){
  var vm =this;
  getUserImage();

  function getUserImage() {
    $scope.userImgURL = "img/avatar.jpg";
    $http.get("/auth/user")
     .success(function(response){if(response.profiles != null)
       $scope.userImgURL = "//graph.facebook.com/" +
       response.profiles[0].externalId + "/picture";});
	 }
});

angular.module('RDash')
.directive('userImage', function userImage(){
  return{
    templateUrl: 'templates/userImage/template.html',
    controller:'userImageController',
    controllerAs:'userImgCtrl',
    restrict:'E',
    scope:{}
  };
});


angular.module('RDash')
.controller('userMenuController', function($scope, $http){
  var vm =this;
  $scope.userMenuIsLoggedIn = false;
  $http.get("/auth/user")
   .success(function(response){
     $scope.userJSON = response;
      if (response.profiles != null && response.profiles.length > 0){
        $scope.userMenuIsLoggedIn = true;
        $scope.userMenuName = response.profiles[0].profile.displayName;
      }
    });
});

angular.module('RDash')
.directive('userMenu', function userMenu(){
  return{
    templateUrl: 'templates/userMenu/template.html',
    controller:'userMenuController',
    controllerAs:'userMenuCtrl',
    restrict:'E',
    scope:{}
  };
});

angular.module('RDash')
.directive('ngEnter', function() {
    return function(scope, element, attrs) {
        element.bind("keydown", function(e) {
            if(e.which === 13) {
                scope.$apply(function(){
                    scope.$eval(attrs.ngEnter, {'e': e});
                });
                e.preventDefault();
            }
        });
    };
});

/**
 * Alerts Controller
 */

angular
    .module('RDash')
    .controller('AlertsCtrl', ['$scope', AlertsCtrl]);

function AlertsCtrl($scope) {
    $scope.alerts = [{
        type: 'success',
        msg: 'Thanks for visiting! Feel free to create pull requests to improve the dashboard!'
    }, {
        type: 'danger',
        msg: 'Testing testing testing'
    }];

    $scope.addAlert = function() {
        $scope.alerts.push({
            msg: 'Another alert!'
        });
    };

    $scope.closeAlert = function(index) {
        $scope.alerts.splice(index, 1);
    };
}

/**
 * Master Controller
 */

angular.module('RDash')
    .controller('MasterCtrl', ['$scope', '$cookieStore', '$http', '$window', MasterCtrl]);


function MasterCtrl($scope, $cookieStore, $http, $window) {
    /**
     * Sidebar Toggle & Cookie Control
     */
    var mobileView = 992;

    $scope.hideUserMenu = true;
    $http.get("/auth/user")
     .success(function(response){
       $scope.userJSON = response;
        if (response.profiles != null && response.profiles.length > 0){
          $scope.hideUserMenu = false;
          $scope.userFirstName = response.profiles[0].profile.displayName.split(" ")[0].toUpperCase();
          $scope.currentUser = response;
        }
      });

      if($window.innerWidth <= 540){
        $scope.isMobile=true;
      }

      $scope.$watch(function(){
       return $window.innerWidth;
    }, function(value) {
      if(value <= 540){
        $scope.isMobile=true;
      }else{
        $scope.isMobile=false;
      }
   });

    $scope.getWidth = function() {
        return window.innerWidth;
    };

    $scope.$watch($scope.getWidth, function(newValue, oldValue) {
        if (newValue >= mobileView) {
            if (angular.isDefined($cookieStore.get('toggle'))) {
                $scope.toggle = ! $cookieStore.get('toggle') ? false : true;
            } else {
                $scope.toggle = true;
            }
        } else {
            $scope.toggle = false;
        }

    });

    // $scope.drinkList=function() {
    //   angular.forEach($scope.drinks, function(drink, index){
    //     drink.expand=false;
    //   });
    // };

    $scope.toggleSidebar = function() {
        $scope.toggle = !$scope.toggle;
        $cookieStore.put('toggle', $scope.toggle);
    };

    window.onresize = function() {
        $scope.$apply();
    };
}

/**
 * Loading Directive
 * @see http://tobiasahlin.com/spinkit/
 */

angular
    .module('RDash')
    .directive('rdLoading', rdLoading);

function rdLoading() {
    var directive = {
        restrict: 'AE',
        template: '<div class="loading"><div class="double-bounce1"></div><div class="double-bounce2"></div></div>'
    };
    return directive;
};

/**
 * Widget Body Directive
 */

angular
    .module('RDash')
    .directive('rdWidgetBody', rdWidgetBody);

function rdWidgetBody() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            loading: '@?',
            classes: '@?'
        },
        transclude: true,
        template: '<div class="widget-body" ng-class="classes"><rd-loading ng-show="loading"></rd-loading><div ng-hide="loading" class="widget-content" ng-transclude></div></div>',
        restrict: 'E'
    };
    return directive;
};

/**
 * Widget Footer Directive
 */

angular
    .module('RDash')
    .directive('rdWidgetFooter', rdWidgetFooter);

function rdWidgetFooter() {
    var directive = {
        requires: '^rdWidget',
        transclude: true,
        template: '<div class="widget-footer" ng-transclude></div>',
        restrict: 'E'
    };
    return directive;
};

/**
 * Widget Header Directive
 */

angular
    .module('RDash')
    .directive('rdWidgetHeader', rdWidgetTitle);

function rdWidgetTitle() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            title: '@',
            icon: '@'
        },
        transclude: true,
        template: '<div class="widget-header"><div class="row"><div class="pull-left"><i class="fa" ng-class="icon"></i> {{title}} </div><div class="pull-right col-xs-6 col-sm-4" ng-transclude></div></div></div>',
        restrict: 'E'
    };
    return directive;
};

/**
 * Widget Directive
 */

angular
    .module('RDash')
    .directive('rdWidget', rdWidget);

function rdWidget() {
    var directive = {
        transclude: true,
        template: '<div class="widget" ng-transclude></div>',
        restrict: 'EA'
    };
    return directive;

    function link(scope, element, attrs) {
        /* */
    }
};
